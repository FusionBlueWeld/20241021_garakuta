# データ処理Webアプリ仕様書

## ベースのフォルダ構成

```text
M-I-E-R-I-O/  # ◀ プロジェクトのルートフォルダ
├── app/                  # ◀ Flaskアプリケーションの本体
│   ├── __init__.py         # Flaskアプリの初期化処理（Application Factory）
│   ├── routes.py           # URLのルーティング（例: @app.route）をここに集約
│   ├── data_processor.py   # CSVの読み込み、フィルタリング、データ抽出などの処理
│   ├── model_handler.py    # Tensorflowモデルの構築、学習、ファインチューニング処理
│   ├── settings_manager.py # FITTING/FUNCTIONタブのJSONファイルの読み書き、関数検証処理
│   │
│   ├── static/             # ◀ CSS, JavaScript, 画像などの静的ファイルを格納
│   │   ├── css/
│   │   │   └── style.css   # モダンなUIを実現するためのスタイルシート
│   │   ├── js/
│   │   │   ├── main.js     # 全ページ共通の処理（UIの初期化など）
│   │   │   ├── view.js     # 「VIEW」タブの動的処理（Plotly描画、フォーム連携）
│   │   │   ├── fitting.js  # 「FITTING」タブの動的処理（表の生成、APPLYボタン）
│   │   │   └── function.js # 「FUNCTION」タブの動的処理（行の追加/削除、APPLYボタン）
│   │   └── images/         # ロゴやアイコンなど
│   │
│   └── templates/          # ◀ HTMLテンプレート
│       └── index.html      # 全ての機能を持つメインページ
│
├── data/                 # ◀ デフォルトで提供するサンプルデータ
│   ├── Feature.csv
│   └── Target.csv
│
├── user_data/            # ◀ ユーザーが生成したデータを保存する場所 (※Git管理外)
│   ├── uploads/            # ユーザーがアップロードしたCSVファイルの一時保存場所
│   └── settings/           # FITTING/FUNCTIONで保存したJSONファイルの保存場所 (旧jsonフォルダ)
│
├── scripts/              # ◀ アプリ本体とは独立した補助スクリプト
│   └── sample_data_creator.py # ここに移動
│
├── run.py                # ◀ Flaskアプリケーションを起動するためのスクリプト
├── config.py             # アプリケーションの設定ファイル (SECRET_KEYなど)
└── requirements.txt      # 必要なPythonライブラリ一覧 (Flask, Tensorflow, pandasなど)
```

## SampleData_Creator.pyの役割

- デバッグ用にサンプルデータを作成する（dataフォルダにFeature.csvとTarget.csv）
- そのデータを用いて、main.pyの動作を検証する

作成するサンプルデータはレーザー溶接の加工条件（Feature）と加工結果（Target）のデータセットです。
デバッグ用としてレーザー加工を採用しているが、アプリの機能はレーザー加工だけではなく、同様のデータ構造でプレス加工や切削加工にも転用することを見込んでいる。

サンプルデータの加工条件（Feature）は、
- **'X1_speed'**: レーザー走査速度
- **'X2_height'**: レーザー焦点位置
- **'X3_power'**: レーザー出力

加工結果（Target）は、
- **'Z_depth'**: 溶け込み深さ
- **'Z_width'**: ビード幅

下記がそのデータを生成するコード例です。

```python
# SampleData_Creator.py

import numpy as np
import pandas as pd

# --- 外乱・ノイズ設定 (ここを調整してデータの「生っぽさ」を変更できます) ---
# 1. 中心位置のランダムオフセットの標準偏差
center_offset_std_x = 10.0  # 走査速度方向のずれの大きさ
center_offset_std_y = 0.2   # 焦点位置方向のずれの大きさ

# 2. 形状の非対称性係数
asymmetry_factor_y = 1.2    # 焦点がμ_yより大きい領域のsigmaを1.2倍する

# 3. 全体的なノイズの大きさ (正規分布の標準偏差)
noise_level_depth = 60.0    # 溶け込み深さのノイズの大きさ (最大値の約2%)
noise_level_width = 8.0     # ビード幅のノイズの大きさ (最大値の約1.8%)

# 4. 外れ値の発生確率と大きさ
outlier_probability = 0.01  # 1%の確率で外れ値が発生
outlier_magnitude_factor = 1.5 # 外れ値の大きさ（通常の最大値の1.5倍まで）

# --- 入力変数の刻み量を指定 ---
X1_speed_values = np.array([5, 10, 20, 50, 100, 200, 300, 400, 500, 600])
X2_height_values = np.array([-6, -5, -4, -3, -2, -1.5, -1, -0.5, 0, 0.5, 1, 2, 3, 4, 5, 6])
X3_power_values = np.array([500, 1000, 2000, 3000, 4000, 5000, 6000])

def asymmetric_gaussian_y(y, A, mu_y, sigma_y_rise, sigma_y_fall):
    """非対称なガウス分布のy項のみを計算する関数。"""
    sigma_y = np.where(y < mu_y, sigma_y_rise, sigma_y_fall)
    exponent = -(y - mu_y)**2 / (2 * sigma_y**2)
    return A * np.exp(exponent)

def calculate_bead_width(x, y, p):
    """ビード幅を計算する関数。各パラメータの効果を乗算でモデル化。"""
    A_width_scale = 8.5
    effect_p = p**0.4
    effect_x = np.exp(-x / 300) + 0.5
    effect_y = 1 + 0.03 * y**2
    return A_width_scale * effect_p * effect_x * effect_y

# --- 基本パラメータと外乱の適用 ---
max_depth = 3150
mu_y_base = 0
sigma_y_base = 3.0

# 1. 中心をランダムにずらす
mu_y_final = mu_y_base + np.random.normal(0, center_offset_std_y)

# 2. 非対称なsigmaを計算
sigma_y_rise, sigma_y_fall = sigma_y_base, sigma_y_base * asymmetry_factor_y

print("--- 生成条件 ---")
print(f"入力変数の組み合わせ数: {len(X1_speed_values)} (speed) x {len(X2_height_values)} (height) x {len(X3_power_values)} (power) = {len(X1_speed_values)*len(X2_height_values)*len(X3_power_values)} 点")
print(f"焦点位置の中心(オフセット適用後): mu_y={mu_y_final:.2f}")
print(f"Y方向の広がり(非対称): (rise={sigma_y_rise:.2f}, fall={sigma_y_fall:.2f})")

# --- 全組み合わせのグリッドを生成 ---
X, Y, P = np.meshgrid(X1_speed_values, X2_height_values, X3_power_values, indexing='ij')

# グリッド座標を1次元配列にフラット化
X_flat = X.flatten()
Y_flat = Y.flatten()
P_flat = P.flatten()

# --- Z_depth (溶け込み深さ) の計算 ---
# 1. 速度の効果: 指数関数で減衰
effect_x = np.exp(-X_flat / 300) + 0.5

# 2. 焦点位置による基本形状（0～1の範囲）を計算
depth_shape = asymmetric_gaussian_y(
    Y_flat, 1.0, mu_y_final, sigma_y_rise, sigma_y_fall
)

# 3. パワーの効果（0～1の範囲、飽和あり）を計算
power_effect_depth = (P_flat / np.max(X3_power_values))**0.7

# 最終的な溶け込み深さを計算
Z_depth = max_depth * effect_x * depth_shape * power_effect_depth

# --- Z_width (ビード幅) の計算 ---
Z_width = calculate_bead_width(X_flat, Y_flat, P_flat)

# --- 全体的なノイズの追加 ---
Z_depth += np.random.normal(0, noise_level_depth, Z_depth.shape)
Z_width += np.random.normal(0, noise_level_width, Z_width.shape)

# --- 外れ値の追加 ---
num_total_points = len(X_flat)
num_outliers = 0
for i in range(num_total_points):
    if np.random.rand() < outlier_probability:
        num_outliers += 1
        # この点を外れ値にする
        Z_depth[i] = max_depth * outlier_magnitude_factor * np.random.rand()
        Z_width[i] = 455 * outlier_magnitude_factor * np.random.rand()

if num_outliers > 0:
    print(f"{num_outliers}個の外れ値を生成しました。")

# --- クリッピングを除去 ---
Z_depth_final = Z_depth
Z_width_final = Z_width

# --- CSVファイルに保存 ---
main_ids = np.arange(num_total_points)

df_features = pd.DataFrame({
    'main_id': main_ids,
    'X1_speed': X_flat,
    'X2_height': Y_flat,
    'X3_power': P_flat
})
df_targets = pd.DataFrame({
    'main_id': main_ids,
    'Z_depth': Z_depth_final,
    'Z_width': Z_width_final
})

df_features.to_csv('Feature.csv', index=False)
df_targets.to_csv('Target.csv', index=False, float_format='%.4f')

print("\nCSVファイルが保存されました:")
print(" - Feature.csv")
print(" - Target.csv")
```

---

## アプリ仕様

### デザイン仕様
- モダンでフラットデザインなUIとする（背景は白っぽい色、ボタンなどオブジェクトの色ははっきりとした色を使用）
- ある程度レスポンシブデザインを考慮する
- WebUIのタイトルは「M-I-E-R-I-O」とする

### 技術スタック
- サーバーサイドはpythonのflaskを使用する
- フロントエンドはHTML、CSS、JavaScriptでゴリゴリ書く
- 機械学習に使用するフレームワークはTensorflowとする

### メインページの仕様
タイトルの下に以下を配置する。
- **Feature**: 「テキストボックス」「ファイルボタン」
- **Target**: 「テキストボックス」「ファイルボタン」

ファイルボタンを押すとダイアログが開いて、CSVファイルを選択。
パスはパラメータとして保持するが、テキストボックスにはファイル名のみを表示する。

その下に「**Production I/O:**」という欄を作り、その欄の中に以下を配置する。
- Ch1: 「LEDボタン」
- Ch2: 「LEDボタン」
- ...
- Ch8: 「LEDボタン」

LEDボタンは等間隔に配置する。
LEDはデフォルト灰色であるが、ボタンを押すと緑色になる。
*※Production I/O欄は発展機能のための前準備であり、この時点ではUIのみ作成する*

---

### タブ構成
メインページの下には3つのタブを用意する。
- **「VIEW」**
- **「FITTING」**
- **「FUNCTION」**

---

### 「VIEW」タブ
- Plotllyでグラフ表示するエリアを設ける。
- 読み込んだFeatureのCSVファイルからヘッダー名を縦に並べ、その横にはドロップダウンボックスを作成する。
    - ただし、FeatureのCSVのヘッダーから"main_id"のヘッダーだけは除外する。
    - 例：
      > **Feature parameter**
      > ```
      > # name      value
      > 1 "X1_speed"  「ドロップダウンボックス」
      > 2 "X2_height" 「ドロップダウンボックス」
      > ...
      > ```
    - ドロップダウンボックスには、「Constant」「X_axis」「Y_axis」を選択できるようにし、「Constant」の場合、任意の値を入れられるようにする。
    - このドロップボックスで、どこかのヘッダーパラメータが「X_axis」、もしくは「Y_axis」を選んだ時、既にそれらが選ばれていたヘッダーのドロップダウンボックスから「X_axis」「Y_axis」の値は消去される（軸の選択が重複しないようにするため）。
    - 「Constant」が選択されているときに、値の入力がなければ、グラフは表示されない。
    - すべてのパラメータで「Constant」「X_axis」「Y_axis」が入力されるまで、グラフが表示されない。

- 同様に、その横にTargetのCSVファイルのフォームも設置する。
    - 例：
      > **Target parameter**
      > 「ドロップダウンボックス」 のみ
    - Targetはドロップダウンボックスの中に、TargetのCSVファイルのヘッダーの選択肢を入れる。
    - こちらも同様に、"main_id"のヘッダーは除去する。
    - こちらも、パラメータの選択がない時は、グラフは表示されない。

- この下に、オーバーラップというラベルのついたトグルスイッチ（ON/OFF）、スイッチの横に「LEARNING」というボタンを設置する。
    - オーバーラップのトグルスイッチは、デフォルトOFFで、FITTINGタブからの関数情報が渡されていなければ、ONにできないようにする。
    - 「LEARNING」ボタンは、このトグルスイッチがONにならないと押せないようにする（グレーにして無効化しておく）。

- また、「LEARNING」ボタンの横に「thresholdボタン」「テキストボックス」を設置する。
    - thresholdボタン＋このテキストボックス、もトグルスイッチをONにしないと機能しないようにしておく。

- その下に、plotlyのグラフを描く。
    - グラフはカラーマップのプロットを使った散布図。
    - カラーマップはjetとする。
    - 軸設定として、Feature parameterのドロップダウンボックスのvalueが、
        - **X_axis** のヘッダーのデータがX軸、
        - **Y_axis** のヘッダーのデータがY軸、
    - Target parameterのドロップダウンボックスで選択したヘッダーがZ軸（カラーマップ表示）となるようにする。
    - 各軸の表示最大値と最小値は、入力されるデータに応じてフレキシブルに変更される。
    - Feature parameter、Target parameterが複数あり、上のフォームで選択を変えたとき、即時自動でグラフには反映される。（もちろん、フォーム入力が消されれば、グラフも表示されなくなる）
    - Feature parameterで「X_axis」「Yaxis」以外のヘッダーパラメータで、「Constant」となっていて任意の値が設定されているとき、そのヘッダー列からその値の行のみが抽出される。
    - この「Constant」の任意値設定が複数ある時、それはAND条件で抽出される。

---

### 「FITTING」タブ
- タブの中の上の方に「LOAD」ボタンを設置し、以降の状態を保存したjsonファイルをロードできるようにする。
    - LOADボタンの横に「線形結合」「乗積」のトグルスイッチを設定する（デフォルトは「線形結合」）。
    - ダイアログが開いて、`user_data/settings`フォルダが開き、以下で設定する`{FITTING}`の入ったファイルを抽出して、選択できるようにする。
- ロードしたFeatureとTargetのCSVファイルのそれぞれのヘッダを、列と行に並べた表を作成する。
    - 横方向の軸にはTargetヘッダーを並べ、
    - 縦方向の軸にはFeatureヘッダーを並べる。
- その交差セルには、それぞれドロップダウンボックスを配置する。
    - ドロップダウンボックスにはガイド表示で「--関数を選択--」と書かれている。
- ヘッダーの数が多く、表が大きくなる時は、タブの中でスクロールできるようにする。

- この表の下に「APPLY」ボタンを設置する。
- 「APPLY」ボタンを押すと、下記2つの動作を実行。
    1. この表で選択した関数の状態がjsonファイルで保存される。
        - jsonファイルは、`user_data/settings/`内に保存される。
        - この時ロードしているFeatureCSVファイルとTargetCSVファイルのパスも保存しておく（どのファイルがロードされた時の設定なのかを紐づけるため）。
        - このjsonファイルは「`settings/{FITTING}_yyyymmddHHMMSS.json`」で保存され、履歴が残るようにする。
    2. 1.のjsonファイル保存を実行したとき、下記の条件が満たされていれば、続きの処理が実行される。
        - この表のすべての欄が何らかの定義された関数が入力されているときのみ、下記が実行される。
        - Target変数の関数が作成される。
            - 例えば、LOADボタン横のトグルスイッチが「線形結合」のとき、
              Target変数：T1、T2が設定されていて、Feature変数：F1、F2、F3が設定されていたとすると、
              ```
              T1 =「F1のT1列設定関数」+「F2のT1列設定関数」+「F3のT1列設定関数」
              T2 =「F1のT2列設定関数」+「F2のT2列設定関数」+「F3のT2列設定関数」
              ```
              （表におけるその列で設定した各関数に対応）
            - もしトグルスイッチが「乗積」であれば、
              ```
              T1 =「F1のT1列設定関数」*「F2のT1列設定関数」*「F3のT1列設定関数」
              T2 =「F1のT2列設定関数」*「F2のT2列設定関数」*「F3のT2列設定関数」
              ```
              という形でTarget変数が表現される。
        - そして、このTarget変数の表現関数で計算された結果を、VIEWタブへ渡す。

#### VIEWタブでの連携処理
*※ここからは、Target変数の表現関数が渡された後のVIEWタブでの処理を示す*
- オーバーラップのトグルスイッチを、ONにできるようになる。
- オーバーラップスイッチがONになったら、
    - Feature parameter欄とTarget parameter欄で設定された変数に沿って、plotlyで表示されている範囲のカラーマップを作成し、表示されてる散布図グラフに重ねて表示する。
    - （ただし、実データが上レイヤー、計算結果が下レイヤーで重ねる、また計算結果のカラーマップ透明度は35%とする）
    - この時に、カラーマップが表示される範囲は、CSVデータが表示される範囲が優先される。
    - そのため、計算されたカラーマップのデータも、CSVデータとうまくオーバーラップする範囲以外は除去しておく（計算負荷軽減のため）。
    - これらのカラーマップは、Feature parameter、Target parameterのフォーム入力を変更すると、CSVデータの表示変更と合わせて、同じく即時変更される。
    - オーバーラップのスイッチをOFFにするとカラーマップは消える。
    - 例えば、Feature parameterが、F1：X_axis、F2：Y_axis、F3：const（value=1000）、Target parameterが、T1を選択とするとき、渡されたT1の表現関数（T1=「F1のT1列設定関数」+「F2のT1列設定関数」+「F3のT1列設定関数」とする）に沿って、その時にグラフ表示される範囲で、（F1=X_axis,F2=Y_axis,F3=const, T1）の値が計算され、その結果がカラーマップとしてX軸にF1、Y軸にF2、強度T1としてグラフ内に重ねて表示される。

- トグルスイッチがオンできるようになったら、その横の「LEARNING」ボタンが押せるようになる。
    - 「LEARNING」ボタンを押すと下記の処理が実行される。
    - マルチパーセプトロンの3層の隠れ層を持つニューラルネットワークが、渡された表現関数のデータ値を学習する。
        - 例えば、入力変数：F1,F2,F3、出力変数（正解ラベル）：T1,T2 として、機械学習を行う。
    - この時に、機械学習の精度がよくなる程度に、カラーマップとして使用される値の量を計算しておく。
    - 次に、このモデルを保存しておき、実際のデータを使ってファインチューニングを行う。
        - 使用するデータは、入力変数：Feature.csvのパラメータ、出力変数（正解ラベル）：Target.csvのパラメータ
    - ファインチューニングを行った最終的な学習結果を、同じようにカラーマップで表示する。
    - 学習中、その下にゲージバーが現れて、学習の進捗を％で演出する表示を追加する。
        - 計算値と実データの学習量を合わせて100%として、その学習過程を見えるようにする。
        - ゲージバーが100％になると「Complete！」という文字が、ゲージバーに出て、その後2秒経って、文字と一緒にゲージバーが消える。
    - 学習中、その進捗がおよそ20%毎に、学習途中のカラーマップを計算し、学習の進行と共に、カラーマップが学習によって変化していく様子を表示する。

- また、トグルスイッチがオンできるようになったら、「LEARNING」ボタンの横のthresholdボタン＋テキストボックス、が機能するようになる。
    - テキストボックスに入力した値は、カラーマップとして表示されているTarget parameterの値と対応する。
    - 例えば、Target parameter欄で、`Z_depth`というparameterを選択しているとき、カラーマップには`Z_depth`のカラーマップが表示されており、テキストボックスに入力された値となる座標をカラーマップ上で繋いで、黒の波線を引いて表示する。
    - この波線が、このアプリで分析する加工の、結果閾値（OK/NG）となる。
    - このthresholdボタンはこの破線の表示、非表示を制御する。
        - 一度押すと緑色に点灯し、波線が表示される。
        - もう一度押すと、点灯が消え、波線も消える。
    - テキストボックスの値の変更はリアルタイムに反映され、値を変えるとすぐにグラフの波線位置も変更される。

---

### 「FUNCTION」タブ
- ここも上の方に「LOAD」ボタンを付けておく。
    - タブの中の上の方に「LOAD」ボタンを設置し、以降の状態を保存したjsonファイルをロードする。
    - ダイアログが開いて、`user_data/settings`フォルダが開き、以下で設定する`{FUNCTION}`の入ったファイルを抽出して、選択できるようにする。
- デフォルト表示
    ```
    # name      equation     parameters
    1 「テキストボックス」「テキストボックス」「テキストボックス」
    ```
- その上に「+Add」「-Del」というボタンも設置しておき、入力関数の行を増やしたり減らしたりできる。
    - 例えば、
      ```
      # name    equation   parameters
      1 関数1    a*x+b      a=1, b=3
      ```
      という入力になる。
    - 複雑な関数となるとき、その表記ルールも設計してください。
- 同様に、このタブの下に「APPLY」ボタンを付けておき、
    1. 「APPLY」ボタンが押されたとき、記入された関数が表記ルールに沿っているかどうかをチェックする機能も実装して、表記ルールから外れた場合、エラーでAPPLY実行できないようにする。
    2. 「APPLY」ボタンを押すとこの表で選択した関数の状態がjsonファイルで保存される。
        - jsonファイルは、`user_data/settings/`内に保存される。
        - この時ロードしているFeatureCSVファイルとTargetCSVファイルのパスも保存しておく（どのファイルがロードされた時の関数なのかを紐づけるため）。
        - このjsonファイルは「`settings/{FUNCTION}_yyyymmddHHMMSS.json`」で保存され、履歴が残るようにする。

- FUNCTIONタブで設定した関数が、FITTINGタブの関数を選択ドロップダウンボックスに選択肢として現れる。

#### デフォルト関数
SampleData_Creator.pyで、各種データ生成に用いた関数は予めデフォルト関数として登録しておく。
| 関数名 | 式 | パラメータ |
| :--- | :--- | :--- |
| Func_X1_Zdepth | `exp(-x / scale) + offset` | `scale=300`, `offset=0.5` |
| Func_X2_Zdepth | `A * exp(-(y - mu_y)^2 / (2 * sigma_y^2))` | `A=1.0`, `mu_y=mu_y_final`, `sigma_y_rise=3.0`, `sigma_y_fall=3.0 * 1.2` |
| Func_X3_Zdepth | `(p / max_power)^exponent` | `max_power=6000`, `exponent=0.7` |
| Func_X1_Zwidth | `exp(-x / scale) + offset` | `scale=300`, `offset=0.5` |
| Func_X2_Zwidth | `1 + coefficient * y^2` | `coefficient=0.03` |
| Func_X3_Zwidth | `p^exponent` | `exponent=0.4` |

---

## 全体を通した指示
- 処理はできるだけフロントエンドで実行し、計算が重たい、またはファイル保存など永続的な記録が必要になる場合はバックエンドのPythonで処理を行うようにする。
- コード内のコメントは日本語で記載して。
- SampleData_Creator.pyで生成されたテストデータ（Feature.csv、Target.csv）を用いて、このアプリの機能のデバッグを行う。

---

## アプリの開発ステップ

### ステップ1: 開発環境のセットアップ
- **達成目的**: プロジェクトの基本的なフォルダ構成（M-I-E-R-I-O/）を作成し、必要なライブラリをインストールする。
- **テスト項目**:
    - `requirements.txt` に必要なライブラリ（Flask, Tensorflow, pandas, Plotly, NumPy）が記載されていることを確認。
    - `pip install -r requirements.txt` を実行し、エラーなくライブラリがインストールされることを確認。

### ステップ2: Flaskアプリケーションの基本設定
- **達成目的**: Flaskアプリケーションを起動し、基本的なルーティングを設定する。
- **テスト項目**:
    - `run.py` を実行し、Flaskサーバーがエラーなく起動することを確認。
    - ブラウザで http://127.0.0.1:5000/ にアクセスし、`index.html` が正しく表示されることを確認。

### ステップ3: HTMLテンプレートの作成
- **達成目的**: メインページのHTMLテンプレート（`index.html`）を作成し、「VIEW」「FITTING」「FUNCTION」のタブ構造を設置する。
- **テスト項目**:
    - `index.html` に3つのタブが正しく表示されることを確認。
    - タブをクリックすると、それぞれの内容が切り替わることを確認。

### ステップ4: CSVファイルのアップロード機能の実装
- **達成目的**: FeatureとTargetのCSVファイルを選択・アップロードし、ファイル名をテキストボックスに表示する機能を実装する。
- **テスト項目**:
    - ファイルボタンを押してCSVファイルを選択すると、テキストボックスにファイル名が表示されることを確認。
    - アップロードされたファイルが `user_data/uploads/` に保存されていることを確認。

### ステップ5: Production I/OのUI実装
- **達成目的**: Production I/O欄にCh1～Ch8のLEDボタンを配置し、クリックで色が灰色から緑色に変わる機能を実装する。
- **テスト項目**:
    - LEDボタンが等間隔に配置され、デフォルトで灰色であることを確認。
    - ボタンをクリックすると緑色に変わり、再度クリックすると灰色に戻ることを確認。

### ステップ6: VIEWタブのフォーム作成
- **達成目的**: FeatureとTargetのCSVヘッダーを読み込み、ドロップダウンボックスを配置する。
- **テスト項目**:
    - CSVアップロード後、Featureのヘッダー（"main_id"を除く）がドロップダウンボックスに表示されることを確認。
    - Targetのヘッダーも同様に表示されることを確認。
    - ドロップダウンボックスで「Constant」「X_axis」「Y_axis」を選択でき、選択が重複しないことを確認。

### ステップ7: Plotlyグラフの表示
- **達成目的**: VIEWタブで選択したパラメータに基づき、Plotlyでカラーマップ散布図を表示する。
- **テスト項目**:
    - 「X_axis」「Y_axis」「Target」を選択すると、jetカラーマップのグラフが表示されることを確認。
    - 「Constant」に値を入力するとデータがフィルタリングされ、グラフに反映されることを確認。
    - 選択を変更すると即時グラフが更新されることを確認。

### ステップ8: FITTINGタブの表作成
- **達成目的**: FITTINGタブにFeatureとTargetのヘッダーを基にした表を作成し、ドロップダウンボックスを配置する。
- **テスト項目**:
    - 表が正しく表示され、ヘッダーがFeatureとTargetに沿っていることを確認。
    - 各セルのドロップダウンボックスに「--関数を選択--」が表示されることを確認。

### ステップ9: JSONファイルの保存とロード
- **達成目的**: FITTINGタブで「APPLY」ボタンを押すと設定をJSONファイルに保存し、「LOAD」ボタンで反映する。
- **テスト項目**:
    - 「APPLY」を押すと `user_data/settings/{FITTING}_yyyymmddHHMMSS.json` が保存されることを確認。
    - 「LOAD」を押してJSONを選択すると、表に設定が反映されることを確認。

### ステップ10: 関数の定義とTarget変数の計算
- **達成目的**: FITTINGタブで選択した関数（線形結合または乗積）に基づきTarget変数を計算し、VIEWタブに渡す。
- **テスト項目**:
    - 表の全セルに関数が選択されている場合、Target変数が正しく計算されることを確認。
    - 計算結果がVIEWタブのグラフに反映されることを確認。

### ステップ11: オーバーラップ機能の実装
- **達成目的**: VIEWタブでオーバーラップトグルをONにすると、計算されたカラーマップが実データに重なる。
- **テスト項目**:
    - トグルをONにすると、透明度35%のカラーマップが表示されることを確認。
    - トグルをOFFにするとカラーマップが消えることを確認。

### ステップ12: LEARNINGボタンの実装
- **達成目的**: LEARNINGボタンでニューラルネットワーク学習を実行し、進捗と結果を表示する。
- **テスト項目**:
    - ボタンを押すとゲージバーが表示され、進捗が更新されることを確認。
    - 学習完了時に「Complete！」が表示され、2秒後にゲージバーが消えることを確認。
    - 学習中、20%ごとにカラーマップが変化することを確認。

### ステップ13: Threshold機能の実装
- **達成目的**: Threshold値に基づく黒の波線をグラフに表示する。
- **テスト項目**:
    - Thresholdボタンを押すと波線が表示され、再度押すと消えることを確認。
    - テキストボックスの値を変更すると波線が即時更新されることを確認。

### ステップ14: FUNCTIONタブの実装
- **達成目的**: FUNCTIONタブで関数の追加・編集・保存を可能にする。
- **テスト項目**:
    - 「+Add」で行が追加され、「-Del」で削除されることを確認。
    - 「APPLY」で `user_data/settings/{FUNCTION}_yyyymmddHHMMSS.json` が保存されることを確認。
    - 表記ルールに違反した場合、エラーが表示されることを確認。

### ステップ15: デフォルト関数の登録
- **達成目的**: SampleData_Creator.py の関数をデフォルトとしてFUNCTIONタブに登録する。
- **テスト項目**:
    - FUNCTIONタブにデフォルト関数（例: Func_X1_Zdepth）が表示されることを確認。
    - FITTINGタブのドロップダウンボックスにデフォルト関数が反映されることを確認。

### ステップ16: 全体の統合テスト
- **達成目的**: すべての機能が連携して正しく動作することを確認する。
- **テスト項目**:
    - CSVをアップロードし、VIEWタブでグラフを表示。
    - FITTINGタブで関数を選択し、JSONを保存。
    - VIEWタブでオーバーラップをONにし、カラーマップを確認。
    - LEARNINGを実行し、進捗と結果を確認。
    - FUNCTIONタブで関数を追加し、FITTINGタブで使用可能か確認。

### ステップ17: レスポンシブデザインの確認
- **達成目的**: 異なるデバイスでUIが正しく表示されることを確認する。
- **テスト項目**:
    - デスクトップ、タブレット、スマートフォンでUIが崩れていないことを確認。
    - タブやボタンが全デバイスで機能することを確認。

### ステップ18: パフォーマンスの最適化
- **達成目的**: 大きなデータセットでもアプリがスムーズに動作するようにする。
- **テスト項目**:
    - 大きなCSVをアップロードし、グラフ表示や学習の実行時間が適切であることを確認。
    - バックエンド処理が効率的に行われることを確認。

### ステップ19: セキュリティの確認
- **達成目的**: ファイルのアップロードや保存が安全に行われることを確認する。
- **テスト項目**:
    - アップロードファイルが `user_data/uploads/` に正しく保存されることを確認。
    - JSONファイルが `user_data/settings/` に保存されることを確認。
    - 不正なデータがアップロードされた場合にエラーが適切に処理されることを確認。

### ステップ20: ドキュメントの作成
- **達成目的**: アプリの使用方法や開発手順を文書化する。
- **テスト項目**:
    - `README.md` に概要、使用方法、インストール手順が記載されていることを確認。
    - コード内のコメントが日本語で適切に記載されていることを確認。

このアプリに必要なライブラリ一覧
requirements.txt
```text
Flask
Tensorflow
pandas
plotly
numpy
```

リポジトリ内に空ファイルを作成するコード
requirements.txtだけは内容を記述する
create_repo.py
```python
import os

def create_project_structure(base_path="."):
    """
    M-I-E-R-I-Oプロジェクトのフォルダとファイルの空の構造を作成します。
    """
    project_name = "M-I-E-R-I-O"
    project_root = os.path.join(base_path, project_name)

    # 定義されたディレクトリとファイル (空のファイルは None で表現)
    structure = {
        "app": {
            "__init__.py": None,
            "routes.py": None,
            "data_processor.py": None,
            "model_handler.py": None,
            "settings_manager.py": None,
            "static": {
                "css": {
                    "style.css": None
                },
                "js": {
                    "main.js": None,
                    "view.js": None,
                    "fitting.js": None,
                    "function.js": None
                },
                "images": {} # imagesディレクトリは空のまま
            },
            "templates": {
                "index.html": None
            }
        },
        "data": {}, # dataディレクトリは空のまま (SampleData_Creator.pyで生成される)
        "user_data": { # user_dataはGit管理外だが、構造は作成しておく
            "uploads": {},
            "settings": {}
        },
        "scripts": {
            "sample_data_creator.py": None
        },
        "run.py": None,
        "config.py": None,
        "requirements.txt": None # requirements.txtもここで作成指示
    }

    print(f"プロジェクトルートディレクトリを作成中: {project_root}")
    os.makedirs(project_root, exist_ok=True)

    def create_items(current_path, items):
        for name, content in items.items():
            item_path = os.path.join(current_path, name)
            if content is None:  # ファイルの場合
                if not os.path.exists(item_path):
                    with open(item_path, 'w', encoding='utf-8') as f:
                        pass # 空のファイルを作成
                    print(f"  ファイルを作成しました: {item_path}")
                else:
                    print(f"  ファイルは既に存在します: {item_path}")
            elif isinstance(content, dict): # ディレクトリの場合
                if not os.path.exists(item_path):
                    os.makedirs(item_path, exist_ok=True)
                    print(f"  ディレクトリを作成しました: {item_path}/")
                else:
                    print(f"  ディレクトリは既に存在します: {item_path}/")
                create_items(item_path, content) # 再帰的に処理

    create_items(project_root, structure)
    print("\nプロジェクト構造の作成が完了しました。")

    # requirements.txt の内容を書き込む
    requirements_path = os.path.join(project_root, "requirements.txt")
    requirements_content = """Flask
Tensorflow
pandas
plotly
numpy
"""
    try:
        with open(requirements_path, 'w', encoding='utf-8') as f:
            f.write(requirements_content.strip()) # 末尾の改行を削除
        print(f"requirements.txt に内容を書き込みました: {requirements_path}")
    except Exception as e:
        print(f"requirements.txt の書き込み中にエラーが発生しました: {e}")


if __name__ == "__main__":
    # このスクリプトを実行するディレクトリの相対パスでプロジェクトを作成
    create_project_structure()
```

ステップ2の処理に必要なコードを、適切なファイルに記述するコード
populate_step2.py
```python
import os

def populate_step2_code(project_root="M-I-E-R-I-O"):
    """
    ステップ2「Flaskアプリケーションの基本設定」に必要なコードを適切なファイルに記述します。
    ファイルが存在しない場合は作成します（通常はcreate_repo.pyで既に作成済み）。
    """
    print(f"--- ステップ2のコードをファイルに記述中 ({project_root}) ---")

    # 1. config.py の内容
    config_path = os.path.join(project_root, "config.py")
    config_content = """
import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your-very-secret-key-please-change-this'
    # その他の設定（例: データベースURIなど）があればここに追加
"""
    try:
        with open(config_path, 'w', encoding='utf-8') as f:
            f.write(config_content.strip() + "\n")
        print(f"  config.py に内容を書き込みました: {config_path}")
    except Exception as e:
        print(f"  config.py の書き込み中にエラーが発生しました: {e}")

    # 2. app/__init__.py の内容 (Application Factory)
    app_init_path = os.path.join(project_root, "app", "__init__.py")
    app_init_content = """
from flask import Flask
from config import Config # config.py から Config クラスをインポート

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config) # Configオブジェクトから設定をロード

    # routes.py で定義されたルートを登録
    from app import routes
    app.register_blueprint(routes.bp) # Blueprintとして登録

    return app
"""
    try:
        with open(app_init_path, 'w', encoding='utf-8') as f:
            f.write(app_init_content.strip() + "\n")
        print(f"  app/__init__.py に内容を書き込みました: {app_init_path}")
    except Exception as e:
        print(f"  app/__init__.py の書き込み中にエラーが発生しました: {e}")

    # 3. app/routes.py の内容
    app_routes_path = os.path.join(project_root, "app", "routes.py")
    app_routes_content = """
from flask import Blueprint, render_template

# Blueprintを作成
bp = Blueprint('main', __name__)

@bp.route('/')
def index():
    # index.html テンプレートをレンダリングして返す
    return render_template('index.html')

# 他のルートは後でここに追加
"""
    try:
        with open(app_routes_path, 'w', encoding='utf-8') as f:
            f.write(app_routes_content.strip() + "\n")
        print(f"  app/routes.py に内容を書き込みました: {app_routes_path}")
    except Exception as e:
        print(f"  app/routes.py の書き込み中にエラーが発生しました: {e}")

    # 4. run.py の内容
    run_path = os.path.join(project_root, "run.py")
    run_content = """
from app import create_app

# Flaskアプリケーションインスタンスを作成
app = create_app()

if __name__ == '__main__':
    # アプリケーションをデバッグモードで実行
    # 本番環境では使用しない
    app.run(debug=True)
"""
    try:
        with open(run_path, 'w', encoding='utf-8') as f:
            f.write(run_content.strip() + "\n")
        print(f"  run.py に内容を書き込みました: {run_path}")
    except Exception as e:
        print(f"  run.py の書き込み中にエラーが発生しました: {e}")

    # 5. app/templates/index.html の内容 (最小限のHTML)
    index_html_path = os.path.join(project_root, "app", "templates", "index.html")
    index_html_content = """
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>M-I-E-R-I-O</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <h1>M-I-E-R-I-O Web Application</h1>
    <p>Flaskアプリケーションの基本設定が完了しました！</p>
    <!-- 後でここにUI要素を追加 -->
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>
"""
    try:
        with open(index_html_path, 'w', encoding='utf-8') as f:
            f.write(index_html_content.strip() + "\n")
        print(f"  app/templates/index.html に内容を書き込みました: {index_html_path}")
    except Exception as e:
        print(f"  app/templates/index.html の書き込み中にエラーが発生しました: {e}")

    print("\n--- ステップ2のコード記述が完了しました ---")

if __name__ == "__main__":
    # このスクリプトを実行する前に、create_repo.pyでプロジェクト構造が作成されている必要があります。
    populate_step2_code()
```

